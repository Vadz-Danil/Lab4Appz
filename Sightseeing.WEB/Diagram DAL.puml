@startuml DAL

class SightSeeingDbContext {
    +DbSet<User> Users
    +DbSet<Place> Places
    +DbSet<Review> Reviews
    +DbSet<Question> Questions
    +DbSet<Answer> Answers
    +DbSet<AdditionalInfo> AdditionalInfos
}

interface IRepository {
    +GetByIdAsync(id: int, eager: bool): T
    +GetAllAsync(eager: bool): IEnumerable<T>
    +AddAsync(entity: T)
    +UpdateAsync(entity: T)
    +DeleteAsync(id: int)
}

class Repository {
    -_dbSet: DbSet<T>
    +Repository(context: SightSeeingDbContext)
    +GetByIdAsync(id: int, eager: bool): T
    +GetAllAsync(eager: bool): IEnumerable<T>
    +AddAsync(entity: T)
    +UpdateAsync(entity: T)
    +DeleteAsync(id: int)
}

interface IUnitOfWork {
    +Users: IRepository<User>
    +Places: IRepository<Place>
    +Reviews: IRepository<Review>
    +Questions: IRepository<Question>
    +Answers: IRepository<Answer>
    +AdditionalInfos: IRepository<AdditionalInfo>
    +SaveChangesAsync(): int
}

class UnitOfWork {
    -_context: SightSeeingDbContext
    -_users: IRepository<User>
    -_places: IRepository<Place>
    -_reviews: IRepository<Review>
    -_questions: IRepository<Question>
    -_answers: IRepository<Answer>
    -_additionalInfos: IRepository<AdditionalInfo>
    +UnitOfWork(context: SightSeeingDbContext)
    +Users: IRepository<User>
    +Places: IRepository<Place>
    +Reviews: IRepository<Review>
    +Questions: IRepository<Question>
    +Answers: IRepository<Answer>
    +AdditionalInfos: IRepository<AdditionalInfo>
    +SaveChangesAsync(): int
}

Repository ..|> IRepository
UnitOfWork ..|> IUnitOfWork
UnitOfWork --> SightSeeingDbContext : uses
Repository --> SightSeeingDbContext : uses

note right of IRepository
  Узагальнений інтерфейс для CRUD-операцій
  з сутностями
end note

note right of UnitOfWork
  Координує роботу кількох репозиторіїв
  та збереження змін у базі даних
end note

@enduml
@startuml

skinparam monochrome true
skinparam classAttributeIconSize 0

package "SightSeeing.Tests" {
  class TestBase {
    #IKernel Kernel
    #Fixture Fixture
    +SetUp(): void
    +TearDown(): void
  }

  class AnswerServiceTests {
    -AnswerService _answerService
    +SetUp(): void
    +AddAnswerAsync_ValidAnswer_AddsAnswer(): Task
    +AddAnswerAsync_NonExistingQuestion_ThrowsBusinessException(): Task
    +AddAnswerAsync_NonExistingUser_ThrowsBusinessException(): Task
    +AddAnswerAsync_InvalidText_ThrowsValidationException(): Task
    +GetAnswersByQuestionIdAsync_ExistingQuestionId_ReturnsAnswers(): Task
    +GetAnswersByQuestionIdAsync_NonExistingQuestionId_ReturnsEmptyList(): Task
  }

  class PlaceServiceTests {
    -PlaceService _placeService
    +SetUp(): void
    +GetPlaceByIdAsync_ExistingId_ReturnsPlaceDto(): Task
    +GetPlaceByIdAsync_NonExistingId_ThrowsBusinessException(): Task
    +GetAllPlacesAsync_ReturnsAllPlaces(): Task
    +AddPlaceAsync_ValidPlace_AddsPlace(): Task
    +UpdatePlaceAsync_ValidPlace_UpdatesPlace(): Task
    +UpdatePlaceAsync_NonExistingPlace_ThrowsBusinessException(): Task
    +DeletePlaceAsync_ValidId_DeletesPlace(): Task
    +DeletePlaceAsync_NonExistingId_ThrowsBusinessException(): Task
  }

  class QuestionServiceTests {
    -QuestionService _questionService
    +SetUp(): void
    +AddQuestionAsync_ValidQuestion_AddsQuestion(): Task
    +AddQuestionAsync_InvalidText_ThrowsValidationException(): Task
    +AddQuestionAsync_NonExistingPlace_ThrowsBusinessException(): Task
    +AddQuestionAsync_NonExistingUser_ThrowsBusinessException(): Task
    +GetQuestionByIdAsync_ExistingId_ReturnsQuestionDto(): Task
    +GetQuestionByIdAsync_NonExistingId_ThrowsBusinessException(): Task
    +GetAllQuestionsAsync_ReturnsAllQuestions(): Task
  }

  class ReviewServiceTests {
    -ReviewService _reviewService
    +SetUp(): void
    +AddReviewAsync_ValidReview_AddsReview(): Task
    +AddReviewAsync_NonExistingPlace_ThrowsBusinessException(): Task
    +AddReviewAsync_NonExistingUser_ThrowsBusinessException(): Task
    +GetReviewByIdAsync_ExistingId_ReturnsReviewDto(): Task
    +GetReviewByIdAsync_NonExistingId_ThrowsBusinessException(): Task
    +GetAllReviewsAsync_ReturnsAllReviews(): Task
  }

  class UserServiceTests {
    -UserService _userService
    +SetUp(): void
    +AuthenticateAsync_ValidCredentials_ReturnsUserDto(): Task
    +AuthenticateAsync_InvalidCredentials_ReturnsNull(): Task
    +AuthenticateAsync_NonExistingUser_ReturnsNull(): Task
    +GetUserByIdAsync_ExistingId_ReturnsUserDto(): Task
    +GetUserByIdAsync_NonExistingId_ThrowsBusinessException(): Task
    +AddUserAsync_ValidUser_AddsUser(): Task
    +AddUserAsync_EmptyName_ThrowsValidationException(): Task
    +AddUserAsync_EmptyPassword_ThrowsValidationException(): Task
    +AddUserAsync_InvalidNameCharacters_ThrowsValidationException(): Task
  }
}

' Inheritance
AnswerServiceTests -|> TestBase
PlaceServiceTests -|> TestBase
QuestionServiceTests -|> TestBase
ReviewServiceTests -|> TestBase
UserServiceTests -|> TestBase

' Dependencies
AnswerServiceTests --> AnswerService
AnswerServiceTests --> IUnitOfWork
AnswerServiceTests --> IQuestionService
AnswerServiceTests --> IUserService
PlaceServiceTests --> PlaceService
PlaceServiceTests --> IUnitOfWork
PlaceServiceTests --> IMapper
QuestionServiceTests --> QuestionService
QuestionServiceTests --> IUnitOfWork
QuestionServiceTests --> IPlaceService
QuestionServiceTests --> IUserService
ReviewServiceTests --> ReviewService
ReviewServiceTests --> IUnitOfWork
ReviewServiceTests --> IPlaceService
ReviewServiceTests --> IUserService
UserServiceTests --> UserService
UserServiceTests --> IUnitOfWork
UserServiceTests --> IMapper

@enduml
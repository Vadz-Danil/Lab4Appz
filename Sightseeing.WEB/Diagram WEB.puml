@startuml WEB
class PlacesController {
    -IPlaceService _placeService
    +PlacesController(IPlaceService placeService)
    +Task<IActionResult> GetAll()
    +Task<IActionResult> GetById(int id)
    +Task<IActionResult> Create(PlaceDto placeDto)
    +Task<IActionResult> Update(int id, PlaceDto placeDto)
    +Task<IActionResult> Delete(int id)
}

class ReviewsController {
    -IReviewService _reviewService
    +ReviewsController(IReviewService reviewService)
    +Task<IActionResult> GetAll()
    +Task<IActionResult> GetById(int id)
    +Task<IActionResult> Create(ReviewDto reviewDto)
}

class UsersController {
    -IUserService _userService
    +UsersController(IUserService userService)
    +Task<IActionResult> Login(LoginDto loginDto)
    +Task<IActionResult> GetById(int id)
    +Task<IActionResult> Create(UserDto userDto)
}

class CreateModel {
    -IPlaceService _placeService
    +CreateModel(IPlaceService placeService)
    +void OnGet()
    +Task<IActionResult> OnPostAsync()
}

class DeleteModel {
    -IPlaceService _placeService
    +DeleteModel(IPlaceService placeService)
    +Task<IActionResult> OnGetAsync(int id)
    +Task<IActionResult> OnPostAsync()
}

class DetailsModel {
    -IPlaceService _placeService
    -IReviewService _reviewService
    -IUnitOfWork _unitOfWork
    +DetailsModel(IPlaceService placeService, IReviewService reviewService, IUnitOfWork unitOfWork)
    +Task<IActionResult> OnGetAsync(int id)
}

class EditModel {
    -IPlaceService _placeService
    +EditModel(IPlaceService placeService)
    +Task<IActionResult> OnGetAsync(int id)
    +Task<IActionResult> OnPostAsync()
}

class IndexModel {
    -IPlaceService _placeService
    +IndexModel(IPlaceService placeService)
    +Task OnGetAsync()
}

PlacesController --> IPlaceService : uses
ReviewsController --> IReviewService : uses
UsersController --> IUserService : uses

CreateModel --> IPlaceService : uses
DeleteModel --> IPlaceService : uses
DetailsModel --> IPlaceService : uses
DetailsModel --> IReviewService : uses
DetailsModel --> IUnitOfWork : uses
EditModel --> IPlaceService : uses
IndexModel --> IPlaceService : uses
@enduml
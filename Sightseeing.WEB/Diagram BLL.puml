@startuml

skinparam monochrome true
skinparam classAttributeIconSize 0

package "SightSeeing.BLL" {
  package "Interfaces" {
    interface IAnswerService {
      +AddAnswerAsync(answerDto: AnswerDto): Task
      +GetAnswersByQuestionIdAsync(questionId: int): Task<IList<AnswerDto>>
    }

    interface IPlaceService {
      +GetPlaceByIdAsync(id: int): Task<PlaceDto>
      +GetAllPlacesAsync(): Task<IEnumerable<PlaceDto>>
      +AddPlaceAsync(placeDto: PlaceDto): Task
      +UpdatePlaceAsync(placeDto: PlaceDto): Task
      +DeletePlaceAsync(id: int): Task
    }

    interface IQuestionService {
      +GetQuestionByIdAsync(id: int): Task<QuestionDto>
      +GetAllQuestionsAsync(): Task<IEnumerable<QuestionDto>>
      +AddQuestionAsync(questionDto: QuestionDto): Task
    }

    interface IReviewService {
      +GetReviewByIdAsync(id: int): Task<ReviewDto>
      +GetAllReviewsAsync(): Task<IEnumerable<ReviewDto>>
      +AddReviewAsync(reviewDto: ReviewDto): Task
    }

    interface IUserService {
      +AuthenticateAsync(username: string, password: string): Task<UserDto>
      +GetUserByIdAsync(id: int): Task<UserDto>
      +AddUserAsync(userDto: UserDto): Task
    }
  }

  package "Services" {
    class AnswerService {
      -IUnitOfWork _unitOfWork
      -IQuestionService _questionService
      -IUserService _userService
      +AnswerService(IUnitOfWork, IQuestionService, IUserService)
      +AddAnswerAsync(answerDto: AnswerDto): Task
      +GetAnswersByQuestionIdAsync(questionId: int): Task<IList<AnswerDto>>
    }

    class PlaceService {
      -IUnitOfWork _unitOfWork
      -IMapper _mapper
      +PlaceService(IUnitOfWork, IMapper)
      +GetPlaceByIdAsync(id: int): Task<PlaceDto>
      +GetAllPlacesAsync(): Task<IEnumerable<PlaceDto>>
      +AddPlaceAsync(placeDto: PlaceDto): Task
      +UpdatePlaceAsync(placeDto: PlaceDto): Task
      +DeletePlaceAsync(id: int): Task
    }

    class QuestionService {
      -IUnitOfWork _unitOfWork
      -IPlaceService _placeService
      -IUserService _userService
      +QuestionService(IUnitOfWork, IPlaceService, IUserService)
      +AddQuestionAsync(questionDto: QuestionDto): Task
      +GetQuestionByIdAsync(id: int): Task<QuestionDto>
      +GetAllQuestionsAsync(): Task<IEnumerable<QuestionDto>>
    }

    class ReviewService {
      -IUnitOfWork _unitOfWork
      -IPlaceService _placeService
      -IUserService _userService
      +ReviewService(IUnitOfWork, IPlaceService, IUserService)
      +AddReviewAsync(reviewDto: ReviewDto): Task
      +GetReviewByIdAsync(id: int): Task<ReviewDto>
      +GetAllReviewsAsync(): Task<IEnumerable<ReviewDto>>
    }

    class UserService {
      -IUnitOfWork _unitOfWork
      -IMapper _mapper
      +UserService(IUnitOfWork, IMapper)
      +AuthenticateAsync(username: string, password: string): Task<UserDto>
      +GetUserByIdAsync(id: int): Task<UserDto>
      +AddUserAsync(userDto: UserDto): Task
    }
  }

  package "Exceptions" {
    class BusinessException {
      +BusinessException(message: string)
    }

    class ValidationException {
      +ValidationException(message: string)
    }
  }

  package "Mapping" {
    class MappingProfile {
      +MappingProfile()
    }
  }

  class PasswordHash {
    +HashPassword(password: string): string
    +VerifyPassword(password: string, hashedPassword: string): bool
  }

  class ValidationHelper {
    +ValidateUser(userDto: UserDto): void
  }
}

' Dependencies
AnswerService .|> IAnswerService
PlaceService .|> IPlaceService
QuestionService .|> IQuestionService
ReviewService .|> IReviewService
UserService .|> IUserService

AnswerService --> IUnitOfWork
AnswerService --> IQuestionService
AnswerService --> IUserService
AnswerService --> ValidationException
AnswerService --> BusinessException

PlaceService --> IUnitOfWork
PlaceService --> IMapper
PlaceService --> ValidationException
PlaceService --> BusinessException

QuestionService --> IUnitOfWork
QuestionService --> IPlaceService
QuestionService --> IUserService
QuestionService --> ValidationException
QuestionService --> BusinessException

ReviewService --> IUnitOfWork
ReviewService --> IPlaceService
ReviewService --> IUserService
ReviewService --> BusinessException

UserService --> IUnitOfWork
UserService --> IMapper
UserService --> PasswordHash
UserService --> ValidationHelper
UserService --> BusinessException

MappingProfile --> UserDto
MappingProfile --> PlaceDto
MappingProfile --> ReviewDto
MappingProfile --> QuestionDto
MappingProfile --> AnswerDto
MappingProfile --> User
MappingProfile --> Place
MappingProfile --> Review
MappingProfile --> Question
MappingProfile --> Answer

ValidationHelper --> ValidationException
ValidationHelper --> UserDto

@enduml
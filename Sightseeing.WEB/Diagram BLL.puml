@startuml BLL
interface IAnswerService {
    +Task AddAnswerAsync(AnswerDto answerDto)
    +Task<IList<AnswerDto>> GetAnswersByQuestionIdAsync(int questionId)
}

class AnswerService {
    -IUnitOfWork _unitOfWork
    -IQuestionService _questionService
    -IUserService _userService
    +AnswerService(IUnitOfWork unitOfWork, IQuestionService questionService, IUserService userService)
    +Task AddAnswerAsync(AnswerDto answerDto)
    +Task<IList<AnswerDto>> GetAnswersByQuestionIdAsync(int questionId)
}

interface IPlaceService {
    +Task<PlaceDto> GetPlaceByIdAsync(int id)
    +Task<IEnumerable<PlaceDto>> GetAllPlacesAsync()
    +Task AddPlaceAsync(PlaceDto placeDto)
    +Task UpdatePlaceAsync(PlaceDto placeDto)
    +Task DeletePlaceAsync(int id)
}

class PlaceService {
    -IUnitOfWork _unitOfWork
    -IMapper _mapper
    +PlaceService(IUnitOfWork unitOfWork, IMapper mapper)
    +Task<PlaceDto> GetPlaceByIdAsync(int id)
    +Task<IEnumerable<PlaceDto>> GetAllPlacesAsync()
    +Task AddPlaceAsync(PlaceDto placeDto)
    +Task UpdatePlaceAsync(PlaceDto placeDto)
    +Task DeletePlaceAsync(int id)
}

interface IQuestionService {
    +Task<QuestionDto> GetQuestionByIdAsync(int id)
    +Task<IEnumerable<QuestionDto>> GetAllQuestionsAsync()
    +Task AddQuestionAsync(QuestionDto questionDto)
}

class QuestionService {
    -IUnitOfWork _unitOfWork
    -IPlaceService _placeService
    -IUserService _userService
    +QuestionService(IUnitOfWork unitOfWork, IPlaceService placeService, IUserService userService)
    +Task<QuestionDto> GetQuestionByIdAsync(int id)
    +Task<IEnumerable<QuestionDto>> GetAllQuestionsAsync()
    +Task AddQuestionAsync(QuestionDto questionDto)
}

interface IReviewService {
    +Task<ReviewDto> GetReviewByIdAsync(int id)
    +Task<IEnumerable<ReviewDto>> GetAllReviewsAsync()
    +Task AddReviewAsync(ReviewDto reviewDto)
    +Task UpdateReviewAsync(ReviewDto reviewDto)
}

class ReviewService {
    -IUnitOfWork _unitOfWork
    -IPlaceService _placeService
    -IUserService _userService
    +ReviewService(IUnitOfWork unitOfWork, IPlaceService placeService, IUserService userService)
    +Task<ReviewDto> GetReviewByIdAsync(int id)
    +Task<IEnumerable<ReviewDto>> GetAllReviewsAsync()
    +Task AddReviewAsync(ReviewDto reviewDto)
    +Task UpdateReviewAsync(ReviewDto reviewDto)
}

interface IUserService {
    +Task<UserDto> AuthenticateAsync(string username, string password)
    +Task<UserDto> GetUserByIdAsync(int id)
    +Task AddUserAsync(UserDto userDto)
}

class UserService {
    -IUnitOfWork _unitOfWork
    -IMapper _mapper
    +UserService(IUnitOfWork unitOfWork, IMapper mapper)
    +Task<UserDto> AuthenticateAsync(string username, string password)
    +Task<UserDto> GetUserByIdAsync(int id)
    +Task AddUserAsync(UserDto userDto)
}

class MappingProfile {
    +MappingProfile()
}

class PasswordHash {
    +string HashPassword(string password)
    +bool VerifyPassword(string password, string hashedPassword)
}

class ValidationHelper {
    +void ValidateUser(UserDto userDto)
}

AnswerService ..|> IAnswerService
PlaceService ..|> IPlaceService
QuestionService ..|> IQuestionService
ReviewService ..|> IReviewService
UserService ..|> IUserService

AnswerService --> IUnitOfWork : uses
AnswerService --> IQuestionService : uses
AnswerService --> IUserService : uses

PlaceService --> IUnitOfWork : uses
PlaceService --> IMapper : uses

QuestionService --> IUnitOfWork : uses
QuestionService --> IPlaceService : uses
QuestionService --> IUserService : uses

ReviewService --> IUnitOfWork : uses
ReviewService --> IPlaceService : uses
ReviewService --> IUserService : uses

UserService --> IUnitOfWork : uses
UserService --> IMapper : uses

UserService --> PasswordHash : uses
UserService --> ValidationHelper : uses
@enduml